library(leaflet)
library(htmlwidgets)
library(stringr) # Used for trimming whitespace from text
# ---------------------------------------------------------------- #
# 2. Load and clean your CSV property data
# ---------------------------------------------------------------- #
csv_path <- "C:/Users/xiaol/OneDrive/Desktop/Summer Fellowship/APS Excess Property.csv"
vacant_properties_df <- read_csv(csv_path) %>%
clean_names() %>%
filter(!is.na(address_known_information))
# ---------------------------------------------------------------- #
# 3. Geocode property addresses into coordinates
# ---------------------------------------------------------------- #
print("Converting addresses to coordinates, please wait...")
vacant_locations <- vacant_properties_df %>%
geocode(address = address_known_information, method = 'osm', lat = latitude, long = longitude)
print(paste("Number of addresses that failed to convert:", sum(is.na(vacant_locations$latitude))))
# ---------------------------------------------------------------- #
# 4. Load the Shapefile with Diagnostics and Fixes
# ---------------------------------------------------------------- #
print("A file selection window will pop up. Please select the .shp file...")
schools_sf <- st_read(file.choose())
# --- Step 4a: Clean and Filter ---
# [FIX 1] Use str_trim to remove potential extra whitespace from system names and create a new column.
schools_sf_cleaned <- schools_sf %>%
mutate(SystemName_clean = str_trim(SystemName))
# Filter using the cleaned column.
atlanta_area_schools_sf <- schools_sf_cleaned %>%
filter(SystemName_clean %in% c("Atlanta Public Schools", "Fulton County", "DeKalb County"))
# --- Step 4b: Critical Diagnostics ---
# [DIAGNOSTIC 1] Check if any schools were found after filtering. If this is 0, there's an issue with the source data.
print("------------------- DIAGNOSTIC INFO -------------------")
print(paste("Step 1: Number of schools successfully filtered:", nrow(atlanta_area_schools_sf)))
if(nrow(atlanta_area_schools_sf) == 0) {
print("WARNING: No schools were found based on the system names. Please double-check the 'SystemName' column in your source file.")
}
# --- Step 4c: Critical Fix ---
# [FIX 2] Forcefully transform the coordinate reference system (CRS) to the Leaflet-compatible WGS84 (EPSG:4326), regardless of the original.
# This is the most critical step to solve the "missing blue dots" issue!
atlanta_area_schools_transformed <- st_transform(atlanta_area_schools_sf, crs = 4326)
# [DIAGNOSTIC 2] Report the CRS after transformation.
print(paste("Step 2: School data CRS has been transformed to:", st_crs(atlanta_area_schools_transformed)$input))
print("-----------------------------------------------------")
# ---------------------------------------------------------------- #
# 5. Create the final interactive map (using the fixed and transformed data)
# ---------------------------------------------------------------- #
print("All data prepared. Generating the final map...")
final_map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron, group = "Map") %>%
setView(lng = -84.3880, lat = 33.7490, zoom = 10) %>%
# Layer 1: All existing schools in the Atlanta Area (Blue)
# Using our final processed data: atlanta_area_schools_transformed
addCircleMarkers(
data = atlanta_area_schools_transformed,
color = "#007bff",
radius = 4,
weight = 1,
fillOpacity = 0.5,
popup = ~paste(
"<b>School:</b>", SchoolName, "<br>",
"<b>System:</b>", SystemName
),
group = "Atlanta Area Schools"
) %>%
# Layer 2: Vacant / Excess Properties (Red)
addCircleMarkers(
data = vacant_locations,
color = "#dc3545",
radius = 6,
stroke = FALSE,
fillOpacity = 0.9,
popup = ~paste(
"<b>", property_name, "</b><br>",
"Address:", address_known_information, "<br>",
"Status:", status_notes
),
group = "Vacant Properties"
) %>%
# Add Legend
addLegend(
position = "topright",
colors = c("#007bff", "#dc3545"),
labels = c("Atlanta Area Schools", "Vacant/Excess Properties"),
title = "Map Legend"
) %>%
# Add Layer Controls
addLayersControl(
overlayGroups = c("Atlanta Area Schools", "Vacant Properties"),
options = layersControlOptions(collapsed = FALSE)
)
# ---------------------------------------------------------------- #
# 6. Display and save the map
# ---------------------------------------------------------------- #
final_map
# 1. 加载所有需要的库
library(sf)
library(readr)
library(dplyr)
library(janitor)
library(tidygeocoder)
library(leaflet)
library(htmlwidgets)
library(stringr)
# ---------------------------------------------------------------- #
# 2. 加载并清洗您的CSV房产数据 (这部分不变)
# ---------------------------------------------------------------- #
csv_path <- "C:/Users/xiaol/OneDrive/Desktop/Summer Fellowship/APS Excess Property.csv"
vacant_properties_df <- read_csv(csv_path) %>%
clean_names() %>%
filter(!is.na(address_known_information))
# ---------------------------------------------------------------- #
# 3. 将房产地址转换为地理坐标 (这部分不变)
# ---------------------------------------------------------------- #
print("正在将您的房产地址转换为坐标...")
vacant_locations <- vacant_properties_df %>%
geocode(address = address_known_information, method = 'osm', lat = latitude, long = longitude)
print(paste("未能成功转换的地址数量:", sum(is.na(vacant_locations$latitude))))
# ---------------------------------------------------------------- #
# 4. 加载Shapefile并【精确筛选华盛顿集群的学校】
# ---------------------------------------------------------------- #
print("即将弹出文件选择窗口，请在窗口中选择 .shp 文件...")
schools_sf <- st_read(file.choose())
# --- 【关键步骤：定义并筛选集群学校】 ---
# 创建一个包含华盛顿集群所有学校确切名称的列表
washington_cluster_schools <- c(
"Booker T. Washington High School",
"Brown Middle School",
"Hollis Innovation Academy",
"M. Agnes Jones Elementary School",
"Tuskegee Airmen Global Academy"
)
# 使用 %in% 运算符，根据学校名称（SchoolName）筛选出这些学校
washington_cluster_sf <- schools_sf %>%
filter(SchoolName %in% washington_cluster_schools)
# 【关键修复】再次进行坐标系转换，确保100%兼容Leaflet
washington_cluster_sf_transformed <- st_transform(washington_cluster_sf, crs = 4326)
# 打印出诊断信息，确认我们找到了正确的学校
print("------------------- 诊断信息 -------------------")
print(paste("成功筛选出的华盛顿集群学校数量为:", nrow(washington_cluster_sf_transformed)))
print("找到的学校列表:")
print(washington_cluster_sf_transformed$SchoolName)
print("-------------------------------------------------")
# ---------------------------------------------------------------- #
# 5. 创建最终的、高度聚焦的交互式地图
# ---------------------------------------------------------------- #
print("数据准备完毕，正在生成您的专属机会地图...")
# 计算集群的中心点，以便地图可以自动聚焦
center_coords <- st_centroid(st_union(washington_cluster_sf_transformed)) %>%
st_coordinates()
final_map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron, group = "地图底图") %>%
# 【新功能】自动将视图中心设置为华盛顿集群，并将缩放级别调近 (例如14)
setView(lng = center_coords[1], lat = center_coords[2], zoom = 14) %>%
# 图层1: 华盛顿集群的学校 (蓝色)
addCircleMarkers(
data = washington_cluster_sf_transformed,
color = "#007bff",
radius = 8, # 让学校的圆点更突出
weight = 2,
fillOpacity = 0.6,
popup = ~paste(
"<b>学校:</b>", SchoolName, "<br>",
"<b>类型:</b>", SchoolLeve
),
group = "华盛顿集群学校"
) %>%
# 图层2: 空置/待售房产 (红色)
addCircleMarkers(
data = vacant_locations,
color = "#dc3545",
radius = 6,
stroke = FALSE,
fillOpacity = 0.9,
popup = ~paste(
"<b>", property_name, "</b><br>",
"地址:", address_known_information, "<br>",
"状态:", status_notes
),
group = "空置房产"
) %>%
# 添加图例
addLegend(
position = "topright",
colors = c("#007bff", "#dc3545"),
labels = c("华盛顿集群学校", "空置/过剩房产"),
title = "地图图例"
) %>%
# 添加图层控制器
addLayersControl(
overlayGroups = c("华盛顿集群学校", "空置房产"),
options = layersControlOptions(collapsed = FALSE)
)
# ---------------------------------------------------------------- #
# 6. 显示并保存地图
# ---------------------------------------------------------------- #
final_map
# 1. Load all required libraries
library(sf)
library(readr)
library(dplyr)
library(janitor)
library(tidygeocoder)
library(leaflet)
library(htmlwidgets)
library(stringr)
# ---------------------------------------------------------------- #
# 2. Load and clean your CSV property data
# ---------------------------------------------------------------- #
csv_path <- "C:/Users/xiaol/OneDrive/Desktop/Summer Fellowship/APS Excess Property.csv"
vacant_properties_df <- read_csv(csv_path) %>%
clean_names() %>%
filter(!is.na(address_known_information))
# ---------------------------------------------------------------- #
# 3. Geocode property addresses into coordinates
# ---------------------------------------------------------------- #
print("Converting your property addresses to coordinates...")
vacant_locations <- vacant_properties_df %>%
geocode(address = address_known_information, method = 'osm', lat = latitude, long = longitude)
print(paste("Number of addresses that failed to convert:", sum(is.na(vacant_locations$latitude))))
# ---------------------------------------------------------------- #
# 4. Load Shapefile and filter for the Washington Cluster
# ---------------------------------------------------------------- #
print("A file selection window will pop up. Please select the .shp file...")
schools_sf <- st_read(file.choose())
# --- Define and filter for the cluster schools ---
# Create a vector of the exact school names for the Washington Cluster
washington_cluster_schools <- c(
"Booker T. Washington High School",
"Brown Middle School",
"Hollis Innovation Academy",
"M. Agnes Jones Elementary School",
"Tuskegee Airmen Global Academy"
)
# Filter for these schools using the 'SchoolName' column
washington_cluster_sf <- schools_sf %>%
filter(SchoolName %in% washington_cluster_schools)
# [Critical Fix] Transform coordinates to be compatible with Leaflet
washington_cluster_sf_transformed <- st_transform(washington_cluster_sf, crs = 4326)
# Print diagnostic info to confirm which schools were found
print("------------------- DIAGNOSTIC INFO -------------------")
print(paste("Successfully filtered", nrow(washington_cluster_sf_transformed), "schools in the Washington Cluster."))
print("Found the following schools:")
print(washington_cluster_sf_transformed$SchoolName)
print("-------------------------------------------------")
# ---------------------------------------------------------------- #
# 5. Create the final, focused interactive map
# ---------------------------------------------------------------- #
print("Data prepared. Generating your custom opportunity map...")
# Calculate the center of the cluster to focus the map view
center_coords <- st_centroid(st_union(washington_cluster_sf_transformed)) %>%
st_coordinates()
final_map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron, group = "Base Map") %>%
# Automatically set the view to the Washington Cluster with a closer zoom
setView(lng = center_coords[1], lat = center_coords[2], zoom = 14) %>%
# Layer 1: Washington Cluster Schools (Blue)
addCircleMarkers(
data = washington_cluster_sf_transformed,
color = "#007bff",
radius = 8,
weight = 2,
fillOpacity = 0.6,
popup = ~paste(
"<b>School:</b>", SchoolName, "<br>",
"<b>Type:</b>", SchoolLevel  # <<<【THE FIX IS HERE】Changed "SchoolLeve" to "SchoolLevel"
),
group = "Washington Cluster Schools"
) %>%
# Layer 2: Vacant Properties (Red)
addCircleMarkers(
data = vacant_locations,
color = "#dc3545",
radius = 6,
stroke = FALSE,
fillOpacity = 0.9,
popup = ~paste(
"<b>", property_name, "</b><br>",
"Address:", address_known_information, "<br>",
"Status:", status_notes
),
group = "Vacant Properties"
) %>%
# Add Legend
addLegend(
position = "topright",
colors = c("#007bff", "#dc3545"),
labels = c("Washington Cluster Schools", "Vacant/Excess Properties"),
title = "Map Legend"
) %>%
# Add Layer Controls
addLayersControl(
overlayGroups = c("Washington Cluster Schools", "Vacant Properties"),
options = layersControlOptions(collapsed = FALSE)
)
# ---------------------------------------------------------------- #
# 6. Display and save the map
# ---------------------------------------------------------------- #
final_map
# ... (previous code) ...
print("A file selection window will pop up. Please select the .shp file...")
schools_sf <- st_read(file.choose())
# --- 【ULTIMATE DIAGNOSTIC STEP】 ---
# This line will print out all available column names from your shapefile.
print(names(schools_sf))
# --- Define and filter for the cluster schools ---
# ... (rest of the code) ...
# ---------------------------------------------------------------- #
# 2. Load and clean your CSV property data
# ---------------------------------------------------------------- #
csv_path <- "C:/Users/xiaol/OneDrive/Desktop/Summer Fellowship/APS Excess Property.csv"
vacant_properties_df <- read_csv(csv_path) %>%
clean_names() %>%
filter(!is.na(address_known_information))
# ---------------------------------------------------------------- #
# 3. Geocode property addresses into coordinates
# ---------------------------------------------------------------- #
print("Converting your property addresses to coordinates...")
vacant_locations <- vacant_properties_df %>%
geocode(address = address_known_information, method = 'osm', lat = latitude, long = longitude)
print(paste("Number of addresses that failed to convert:", sum(is.na(vacant_locations$latitude))))
# ---------------------------------------------------------------- #
# 4. Load Shapefile and filter for the Washington Cluster
# ---------------------------------------------------------------- #
print("A file selection window will pop up. Please select the .shp file...")
schools_sf <- st_read(file.choose())
# --- Define and filter for the cluster schools ---
washington_cluster_schools <- c(
"Booker T. Washington High School",
"Brown Middle School",
"Hollis Innovation Academy",
"M. Agnes Jones Elementary School",
"Tuskegee Airmen Global Academy"
)
washington_cluster_sf <- schools_sf %>%
filter(SchoolName %in% washington_cluster_schools)
# Transform coordinates to be compatible with Leaflet
washington_cluster_sf_transformed <- st_transform(washington_cluster_sf, crs = 4326)
# Print diagnostic info to confirm which schools were found
print("------------------- DIAGNOSTIC INFO -------------------")
print(paste("Successfully filtered", nrow(washington_cluster_sf_transformed), "schools in the Washington Cluster."))
print("Found the following schools (Note: some may be missing if names in the file don't match exactly):")
print(washington_cluster_sf_transformed$SchoolName)
print("-------------------------------------------------------")
# ---------------------------------------------------------------- #
# 5. Create the final, focused interactive map
# ---------------------------------------------------------------- #
print("Data prepared. Generating your final opportunity map...")
# Calculate the center of the cluster to focus the map view
center_coords <- st_centroid(st_union(washington_cluster_sf_transformed)) %>%
st_coordinates()
final_map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron, group = "Base Map") %>%
# Automatically set the view to the Washington Cluster with a closer zoom
setView(lng = center_coords[1], lat = center_coords[2], zoom = 14) %>%
# Layer 1: Washington Cluster Schools (Blue)
addCircleMarkers(
data = washington_cluster_sf_transformed,
color = "#007bff",
radius = 8,
weight = 2,
fillOpacity = 0.6,
popup = ~paste(
"<b>School:</b>", SchoolName, "<br>",
"<b>Type:</b>", Type  # <<<【THE FINAL FIX IS HERE】
),
group = "Washington Cluster Schools"
) %>%
# Layer 2: Vacant Properties (Red)
addCircleMarkers(
data = vacant_locations,
color = "#dc3545",
radius = 6,
stroke = FALSE,
fillOpacity = 0.9,
popup = ~paste(
"<b>", property_name, "</b><br>",
"Address:", address_known_information, "<br>",
"Status:", status_notes
),
group = "Vacant Properties"
) %>%
# Add Legend
addLegend(
position = "topright",
colors = c("#007bff", "#dc3545"),
labels = c("Washington Cluster Schools", "Vacant/Excess Properties"),
title = "Map Legend"
) %>%
# Add Layer Controls
addLayersControl(
overlayGroups = c("Washington Cluster Schools", "Vacant Properties"),
options = layersControlOptions(collapsed = FALSE)
)
# ---------------------------------------------------------------- #
# 6. Display and save the map
# ---------------------------------------------------------------- #
final_map
# --- 诊断脚本：在您的文件中搜索学校 ---
# 1. 加载 sf 库
library(sf)
library(dplyr)
# 2. 提示您选择 shapefile 文件
print("请在弹出的窗口中选择您的 .shp 文件...")
schools_sf <- st_read(file.choose())
# 3. 搜索包含特定关键词的学校名称
# 使用 grepl() 函数进行模糊搜索，case_insensitive = TRUE 忽略大小写
hollis_results <- schools_sf %>% filter(grepl("Hollis", SchoolName, ignore.case = TRUE))
jones_results <- schools_sf %>% filter(grepl("Jones", SchoolName, ignore.case = TRUE))
tuskegee_results <- schools_sf %>% filter(grepl("Tuskegee", SchoolName, ignore.case = TRUE))
# 4. 打印出搜索结果
print("------ 搜索结果 ------")
print("找到包含 'Hollis' 的学校:")
print(hollis_results$SchoolName)
print("找到包含 'Jones' 的学校:")
print(jones_results$SchoolName)
print("找到包含 'Tuskegee' 的学校:")
print(tuskegee_results$SchoolName)
print("----------------------")
# ---------------------------------------------------------------- #
# 2. Load and clean your CSV property data
# ---------------------------------------------------------------- #
csv_path <- "C:/Users/xiaol/OneDrive/Desktop/Summer Fellowship/APS Excess Property.csv"
vacant_properties_df <- read_csv(csv_path) %>%
clean_names() %>%
filter(!is.na(address_known_information))
# ---------------------------------------------------------------- #
# 3. Geocode property addresses into coordinates
# ---------------------------------------------------------------- #
print("Converting your property addresses to coordinates...")
vacant_locations <- vacant_properties_df %>%
geocode(address = address_known_information, method = 'osm', lat = latitude, long = longitude)
print(paste("Number of addresses that failed to convert:", sum(is.na(vacant_locations$latitude))))
# ---------------------------------------------------------------- #
# 4. Load Shapefile and filter for the Washington Cluster
# ---------------------------------------------------------------- #
print("A file selection window will pop up. Please select the .shp file...")
schools_sf <- st_read(file.choose())
# --- [THE FIX] Define cluster schools with the EXACT names from your file ---
washington_cluster_schools <- c(
"Booker T. Washington High School",
"Brown Middle School",
"Michael R. Hollis Innovation Academy", # Corrected Name
"M. A. Jones Elementary School",       # Corrected Name
"Tuskegee Airman Global Academy"       # Corrected Name
)
# Filter for these schools using the 'SchoolName' column
washington_cluster_sf <- schools_sf %>%
filter(SchoolName %in% washington_cluster_schools)
# Transform coordinates to be compatible with Leaflet
washington_cluster_sf_transformed <- st_transform(washington_cluster_sf, crs = 4326)
# Print diagnostic info to confirm all schools were found
print("------------------- DIAGNOSTIC INFO -------------------")
print(paste("Successfully filtered", nrow(washington_cluster_sf_transformed), "schools in the Washington Cluster."))
print("Found the following schools:")
print(washington_cluster_sf_transformed$SchoolName)
print("-------------------------------------------------------")
# ---------------------------------------------------------------- #
# 5. Create the final, complete interactive map
# ---------------------------------------------------------------- #
print("Data prepared. Generating your final opportunity map...")
# Calculate the center of the cluster to focus the map view
center_coords <- st_centroid(st_union(washington_cluster_sf_transformed)) %>%
st_coordinates()
final_map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron, group = "Base Map") %>%
# Automatically set the view to the Washington Cluster
setView(lng = center_coords[1], lat = center_coords[2], zoom = 14) %>%
# Layer 1: Washington Cluster Schools (Blue)
addCircleMarkers(
data = washington_cluster_sf_transformed,
color = "#007bff",
radius = 8,
weight = 2,
fillOpacity = 0.6,
popup = ~paste(
"<b>School:</b>", SchoolName, "<br>",
"<b>Type:</b>", Type
),
group = "Washington Cluster Schools"
) %>%
# Layer 2: Vacant Properties (Red)
addCircleMarkers(
data = vacant_locations,
color = "#dc3545",
radius = 6,
stroke = FALSE,
fillOpacity = 0.9,
popup = ~paste(
"<b>", property_name, "</b><br>",
"Address:", address_known_information, "<br>",
"Status:", status_notes
),
group = "Vacant Properties"
) %>%
# Add Legend
addLegend(
position = "topright",
colors = c("#007bff", "#dc3545"),
labels = c("Washington Cluster Schools", "Vacant/Excess Properties"),
title = "Map Legend"
) %>%
# Add Layer Controls
addLayersControl(
overlayGroups = c("Washington Cluster Schools", "Vacant Properties"),
options = layersControlOptions(collapsed = FALSE)
)
# ---------------------------------------------------------------- #
# 6. Display and save the map
# ---------------------------------------------------------------- #
final_map
saveWidget(final_map, file = "Washington_Cluster_Opportunity_Map_COMPLETE.html", selfcontained = TRUE)
print("TASK COMPLETE! Your final, complete map has been successfully generated and saved as Washington_Cluster_Opportunity_Map_COMPLETE.html.")
